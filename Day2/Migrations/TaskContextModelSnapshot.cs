// <auto-generated />
using System;
using Day2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Day2.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Day2.Models.Departments", b =>
                {
                    b.Property<int?>("Dnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Dnum"));

                    b.Property<string>("Dname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MGRSSN")
                        .HasColumnType("int");

                    b.Property<DateTime>("MGRStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Dnum");

                    b.HasIndex("MGRSSN")
                        .IsUnique()
                        .HasFilter("[MGRSSN] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Day2.Models.Dependant", b =>
                {
                    b.Property<int?>("ESSN")
                        .HasColumnType("int");

                    b.Property<string>("Dependant_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ESSN", "Dependant_Name");

                    b.ToTable("Dependants");
                });

            modelBuilder.Entity("Day2.Models.Employee", b =>
                {
                    b.Property<int>("SSN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SSN"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Dno")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuperSSN")
                        .HasColumnType("int");

                    b.HasKey("SSN");

                    b.HasIndex("Dno");

                    b.HasIndex("SuperSSN");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Day2.Models.Project", b =>
                {
                    b.Property<int?>("Pnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Pnum"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dnum")
                        .HasColumnType("int");

                    b.Property<string>("Plocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pnum");

                    b.HasIndex("Dnum");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Day2.Models.Works_For", b =>
                {
                    b.Property<int?>("ESSN")
                        .HasColumnType("int");

                    b.Property<int?>("Pno")
                        .HasColumnType("int");

                    b.Property<int?>("Hours")
                        .HasColumnType("int");

                    b.HasKey("ESSN", "Pno");

                    b.HasIndex("Pno");

                    b.ToTable("Works_For");
                });

            modelBuilder.Entity("Day2.Models.Departments", b =>
                {
                    b.HasOne("Day2.Models.Employee", "manager")
                        .WithOne("Managesdepartment")
                        .HasForeignKey("Day2.Models.Departments", "MGRSSN");

                    b.Navigation("manager");
                });

            modelBuilder.Entity("Day2.Models.Dependant", b =>
                {
                    b.HasOne("Day2.Models.Employee", "employee")
                        .WithMany("dependants")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Day2.Models.Employee", b =>
                {
                    b.HasOne("Day2.Models.Departments", "Worksdepartment")
                        .WithMany("employees")
                        .HasForeignKey("Dno");

                    b.HasOne("Day2.Models.Employee", "SuperVisor")
                        .WithMany("employees")
                        .HasForeignKey("SuperSSN");

                    b.Navigation("SuperVisor");

                    b.Navigation("Worksdepartment");
                });

            modelBuilder.Entity("Day2.Models.Project", b =>
                {
                    b.HasOne("Day2.Models.Departments", "department")
                        .WithMany("projects")
                        .HasForeignKey("Dnum");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Day2.Models.Works_For", b =>
                {
                    b.HasOne("Day2.Models.Employee", "employee")
                        .WithMany("works_for")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Day2.Models.Project", "project")
                        .WithMany("works_for")
                        .HasForeignKey("Pno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("project");
                });

            modelBuilder.Entity("Day2.Models.Departments", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("projects");
                });

            modelBuilder.Entity("Day2.Models.Employee", b =>
                {
                    b.Navigation("Managesdepartment")
                        .IsRequired();

                    b.Navigation("dependants");

                    b.Navigation("employees");

                    b.Navigation("works_for");
                });

            modelBuilder.Entity("Day2.Models.Project", b =>
                {
                    b.Navigation("works_for");
                });
#pragma warning restore 612, 618
        }
    }
}
